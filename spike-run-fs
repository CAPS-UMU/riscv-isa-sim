#!/bin/bash
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
SCRIPT_COMMAND="$0"
set -o nounset
set -o pipefail
set -o errexit
trap 'echo "$SCRIPT_COMMAND: error $? at line $LINENO"' ERR

show_help() {
    echo "Usage:
    $SCRIPT_COMMAND [options] -- program [program arguments]

Supported options:
    --spike=S:              Specify location of spike binary.
    --spike-sdk=S:          Specify location of spike sdk, used to find
                                the kernel image (Image) and
                                the bootloader (fw_jump.elf).
    --spike-arg=A:          Add argument A to the generated spike command.
    -sA:                    Shorthand for --spike-arg
    --num-procs=P:          Specify number of precessors
    --dry-run:              Do not actually call spike, only generate the
                                initramfs and print the command line that
                                would be used.
    --keep-tmp:             Do not remove the temporary directory and
                                initramfs. Useful with --dry-run to be able
                                to execute the printed command.
    --debug:                Prepend the command with «gdb --args »
    --help:                 Show this help."
}

echo $#

if [ $# -eq 0 ] ; then
    show_help
    exit 0
fi

SPIKE_SDK="${SPIKE_SDK:-${SCRIPT_DIR}/riscv-spike-sdk}"
NUM_PROCS=1
DRY_RUN=no
KEEP_TMP=no
declare -a SPIKE_ARGS
SPIKE_ARGS=()
COMMAND_PREFIX=""

optspec="spike:,spike-arg:,spike-sdk:,num-procs:,dry-run,keep-tmp,debug,help"
optspec_short="s:"
errors="$(getopt -n error-detected -Q --options "${optspec_short}" --long ${optspec} -- "$@" 2>&1 || true)"
if [[ "$errors" =~ error-detected:.+ ]] ; then
    echo "$errors" | cut -d: -f2- | xargs -d'\n' -i% -- echo "Error:%."
    show_help 2>&1
    exit 1
fi 2>&1
eval set -- "$(getopt -n "${SCRIPT_COMMAND}" --options "${optspec_short}" --long "${optspec}" -- "$@")"

while [[ $# -gt 0 ]] ; do
    if [[ "--spike-arg" = "$1" || "-s" = "$1" ]] ; then
        shift
        SPIKE_ARGS+=("$1")
    elif [[ "--spike-sdk" = "$1" ]] ; then
        shift
        SPIKE_SDK="$1"
    elif [[ "--spike" = "$1" ]] ; then
        shift
        SPIKE="$1"
    elif [[ "--num-procs" = "$1" ]] ; then
        shift
        NUM_PROCS="$1"
    elif [[ "--dry-run" = "$1" ]] ; then
        DRY_RUN=yes
    elif [[ "--keep-tmp" = "$1" ]] ; then
        KEEP_TMP=yes
    elif [[ "--debug" = "$1" ]] ; then
        COMMAND_PREFIX="gdb --args "
    elif [[ "--help" = "$1" ]] ; then
        show_help 2>&1
        exit 0
    elif [[ "--" = "$1" ]] ; then
        shift
        break # rest of argumens are for benchmark
    else 
        echo "Unknown option '$1'" 2>&1
        show_help 2>&1
        exit 1
    fi
    shift
done
if [[ $# -lt 1 ]] ; then
    echo "Benchmark not specified" 2>&1
    exit 1
fi
BENCHMARK="$1"
shift
BENCHMARK_ARGS=("$@")

KERNEL_IMAGE="${SPIKE_SDK}"/build/linux/arch/riscv/boot/Image
SPIKE="${SPIKE:-${SPIKE_SDK}/toolchain/bin/spike}"
FW_JUMP="${SPIKE_SDK}"/build/opensbi/platform/generic/firmware/fw_jump.elf

[ -e "$KERNEL_IMAGE" ] || {
    echo "'$KERNEL_IMAGE' not found. Please specify the location of riscv-spike-sdk (current: --spike-sdk='$SPIKE_SDK')" 2>&1
    exit 1
}

[ -e "$SPIKE" ] || {
    echo "'$SPIKE' not found, specify --spike" 2>&1
    exit 1
}

TMP_DIR="$(mktemp -d)"
INITRAMFS="$TMP_DIR"/initramfs.cpio
mkdir "$TMP_DIR"/initramfs/
mkdir "$TMP_DIR"/initramfs/benchmark/
cp "$BENCHMARK" "$TMP_DIR"/initramfs/benchmark/
{
    printf "#!/bin/sh\n\n"
    printf "cd /benchmark\n"
    printf "if test -f /proc/sys/kernel/perf_event_paranoid ; then echo -1 > /proc/sys/kernel/perf_event_paranoid ; fi\n"
    printf "if test -f /proc/sys/kernel/perf_user_access ; then echo 2 > /proc/sys/kernel/perf_user_access ; fi\n"
    printf "echo 'Starting benchmark'\n"
    printf "set -x\n"
    printf "/benchmark/%q" "$(basename "${BENCHMARK}")"
    if [[ "${#BENCHMARK_ARGS[@]}" -gt 0 ]] ; then
        printf " %q" "${BENCHMARK_ARGS[@]}"
    fi
    printf "\n"
} > "$TMP_DIR"/initramfs/benchmark-start
mkdir "$TMP_DIR"/initramfs/etc/
echo "# Startup the system
::sysinit:/bin/mount -t proc proc /proc
::sysinit:/bin/mount -o remount,rw /
::sysinit:/bin/mkdir -p /dev/pts /dev/shm
::sysinit:/bin/mount -a
::sysinit:/bin/mkdir -p /run/lock/subsys
::sysinit:/sbin/swapon -a
null::sysinit:/bin/ln -sf /proc/self/fd /dev/fd
null::sysinit:/bin/ln -sf /proc/self/fd/0 /dev/stdin
null::sysinit:/bin/ln -sf /proc/self/fd/1 /dev/stdout
null::sysinit:/bin/ln -sf /proc/self/fd/2 /dev/stderr
::sysinit:/bin/hostname -F /etc/hostname
# now run any rc scripts
::sysinit:/etc/init.d/rcS

## Stuff to do before rebooting
#::shutdown:/etc/init.d/rcK
#::shutdown:/sbin/swapoff -a
#::shutdown:/bin/umount -a -r

::sysinit:/benchmark-start
::sysinit:/sbin/poweroff
" > "$TMP_DIR"/initramfs/etc/inittab
chmod +x "$TMP_DIR"/initramfs/benchmark-start
( cd "$TMP_DIR"/initramfs/ ; find . -print0 | cpio --null --create --format=newc --quiet > "${INITRAMFS}" )

declare -a COMMAND
COMMAND=("${SPIKE}" --isa=rv64gcv_Zvl512b_Zve64d
                    -p$"${NUM_PROCS}"
                    --kernel "${KERNEL_IMAGE}"
                    --initrd "${INITRAMFS}"
                    "${SPIKE_ARGS[@]}"
                    "${FW_JUMP}" )

printf "%q " "${COMMAND[@]}"
printf "\n"

if [ "${DRY_RUN}" == "no" ] ; then
    ${COMMAND_PREFIX}"${COMMAND[@]}"
fi

if [ "${KEEP_TMP}" == "no" ] ; then
    rm -rf "${TMP_DIR}"
    if [ "${DRY_RUN}" == "yes" ] ; then
        echo "Warning: '${TMP_DIR}' has been removed, consider using --keep-tmp" 2>&1
    fi
fi
